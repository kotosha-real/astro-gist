---
interface Props {
    id: string
    // Caption to display below the gist. If not provided, no caption will be displayed. Caption will only be displayed if the gist is loaded successfully
    caption?: string
    // Additional class to add to the figure. Useful for styling
    className?: string
    // File to display from the gist. If not provided, the whole gist will be displayed
    file?: string
    // URL to the stylesheet to use for styling the gist
    gistStylesUrl?: string
    // Whether to lazy load the gist. Use IntersectionObserver to load the gist when it comes into view. If IntersectionObserver is not supported, the gist will be loaded immediately. Defaults to true
    lazy?: boolean
    // Margin around the root of the IntersectionObserver. The more the margin, the earlier the iframe will be loaded. Defaults to 150
    observerRootMargin?: number
    // Whether to show the link to the gist when the gist fails to load. Defaults to true
    showGistLinkOnError?: boolean
}

const {
    caption,
    className,
    file,
    gistStylesUrl,
    id: gistId,
    lazy = true,
    observerRootMargin = 150,
    showGistLinkOnError = true
} = Astro.props

// Generate a unique ID for the iframe in case there are multiple gists with the same id on the page
const uniqueId = Math.random().toString(36).substring(2, 15)
const gistLink = `https://gist.github.com/${gistId}.js${file ? `?file=${file}` : ''}`
const iframeId = `astro-gist-${gistId}-${uniqueId}`
---

<figure class={className}>
    <div>
        <iframe
            frameborder={0}
            id={iframeId}
            data-astro-gist-iframe
            data-gist-link={gistLink}
            data-gist-styles-url={gistStylesUrl}
            data-lazy={lazy.toString()}
            data-root-margin={observerRootMargin}
            data-show-gist-link-on-error={showGistLinkOnError}></iframe>
    </div>
    {caption && <figcaption>{caption}</figcaption>}
</figure>

<style>
    figure {
        position: relative;
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    div {
        position: relative;
    }

    iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    figcaption {
        font-size: 0.75em;
        text-align: center;
    }
</style>

<script>
    declare global {
        interface Window {
            AstroGist: { onLoad(id: string): void }
        }
    }
    window.AstroGist = window.AstroGist || { onLoad: () => {} }

    const getIframeDocument = (iframe: HTMLIFrameElement) => iframe.contentWindow?.document || iframe.contentDocument

    const onLoad = (iframeId: string): void => {
        const iframe = document.querySelector<HTMLIFrameElement>(`#${iframeId}`)

        if (!iframe) {
            console.log(
                '%cAstro Gist',
                'background:linear-gradient(83.21deg,#3245ff 0%,#bc52ee 100%);border-radius:0.75em;color:rgb(242, 246, 250);padding:0.25em 0.5em',
                `Could not find iframe with the given id ${iframeId}. Nothing will happen`
            )

            return
        }

        const iframeDocument = getIframeDocument(iframe)
        // Scroll height is 0 when the gist wasn't loaded successfully
        const gistLoadingStatus = iframeDocument.documentElement.scrollHeight > 0 ? 'success' : 'error'

        if (gistLoadingStatus === 'success') {
            iframe.parentElement.style.paddingBlockEnd = iframeDocument.documentElement.scrollHeight + 'px'

            // Intercept link clicks within iframe to open in parent window
            iframeDocument.body.addEventListener('click', (evt) => {
                const eventTarget = evt.target as HTMLElement

                if (eventTarget.tagName === 'A') {
                    evt.preventDefault()

                    const targetHref = eventTarget.getAttribute('href')

                    parent.open(targetHref, '_blank')
                }
            })
        } else if (iframe.dataset.showGistLinkOnError) {
            let figcaption = iframe.parentElement.parentElement.querySelector('figcaption')
            const hasCaption = figcaption !== null

            if (!hasCaption) {
                figcaption = document.createElement('figcaption')
            }

            figcaption.innerHTML = iframe.dataset.showGistLinkOnError
                ? `Unable to load the gist. <a href="${iframe.dataset.gistLink}" target="_blank" rel="noopener">View it on GitHub</a>`
                : ''

            if (!hasCaption) {
                iframe.parentElement.parentElement.appendChild(figcaption)
            }
        }

        iframe.parentElement.parentElement.dataset.loadingStatus = gistLoadingStatus
    }

    window.AstroGist.onLoad = onLoad

    const getIframeSrcDoc = (iframe) => {
        const getIframeDocumentElementAttributesString = (iframe) => {
            const iframeDocument = getIframeDocument(iframe)
            let res = ''

            for (const attr of iframeDocument.documentElement.attributes) {
                res += `${attr.name}="${attr.value}" `
            }

            return res.trim()
        }
        const getGistStylesheetLinkHtmlString = (iframe) => {
            if (!iframe.dataset.gistStylesUrl) {
                return ''
            }

            const link = document.createElement('link')
            link.href = iframe.dataset.gistStylesUrl
            link.rel = 'stylesheet'

            return link.outerHTML
        }
        const getGistScriptHtmlString = (iframe) => {
            const script = document.createElement('script')
            script.src = iframe.dataset.gistLink

            return script.outerHTML
        }

        return `<html ${getIframeDocumentElementAttributesString(iframe)}><head><style>body { margin: 0; padding: 0; }</style>${getGistStylesheetLinkHtmlString(iframe)}</head><body onload="window.parent.AstroGist.onLoad('${iframe.id}')">${getGistScriptHtmlString(iframe)}</body></html>`
    }

    const iframes = document.querySelectorAll<HTMLIFrameElement>('[data-astro-gist-iframe]')

    iframes.forEach((iframe) => {
        if (
            iframe.dataset.lazy === 'true' &&
            'IntersectionObserver' in window &&
            'IntersectionObserverEntry' in window &&
            'intersectionRatio' in window.IntersectionObserverEntry.prototype
        ) {
            function handleIntersection(entries, observer) {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        iframe.srcdoc = getIframeSrcDoc(iframe)

                        observer.disconnect()
                    }
                })
            }

            const rootMargin = isNaN(Number(iframe.dataset.rootMargin)) ? '0px' : `${iframe.dataset.rootMargin}px`

            const observer = new IntersectionObserver(handleIntersection, { rootMargin })

            observer.observe(iframe)
        } else {
            iframe.srcdoc = getIframeSrcDoc(iframe)
        }
    })
</script>
